Bước 2: Tạo một Slice với createAsyncThunk
Giả sử bạn đang có một tính năng để lấy danh sách người dùng từ một API. Để làm điều này, chúng ta sẽ sử dụng createAsyncThunk để xử lý logic bất đồng bộ và cập nhật Redux state tương ứng.

File: userSlice.js

javascript
Copy code
import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Tạo async thunk để gọi API lấy danh sách người dùng
export const fetchUsers = createAsyncThunk(
  'users/fetchUsers',
  async (_, { rejectWithValue }) => {
    try {
      const response = await fetch('https://jsonplaceholder.typicode.com/users');
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      return data;
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

const userSlice = createSlice({
  name: 'users',
  initialState: {
    users: [],
    loading: false,
    error: null
  },
  reducers: {},
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsers.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchUsers.fulfilled, (state, action) => {
        state.loading = false;
        state.users = action.payload;
      })
      .addCase(fetchUsers.rejected, (state, action) => {
        state.loading = false;
        state.error = action.payload;
      });
  },
});

export default userSlice.reducer;
Bước 3: Thiết lập Store
File: store.js

javascript
Copy code
import { configureStore } from '@reduxjs/toolkit';
import userReducer from './userSlice';

const store = configureStore({
  reducer: {
    users: userReducer,
  },
});

export default store;
Bước 4: Sử dụng Thunk trong Component
File: UserList.js

javascript
Copy code
import React, { useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchUsers } from './userSlice';

const UserList = () => {
  const dispatch = useDispatch();
  const { users, loading, error } = useSelector((state) => state.users);

  useEffect(() => {
    dispatch(fetchUsers());
  }, [dispatch]);

  if (loading) return <p>Loading...</p>;
  if (error) return <p>Error: {error}</p>;

  return (
    <ul>
      {users.map((user) => (
        <li key={user.id}>{user.name}</li>
      ))}
    </ul>
  );
};

export default UserList;
Giải thích Luồng Chạy
Khi Component Render:

Khi UserList component được render, nó sẽ gọi dispatch(fetchUsers()) trong useEffect. Điều này kích hoạt async thunk fetchUsers.
Pending State:

Khi async thunk fetchUsers bắt đầu thực thi, action fetchUsers.pending được dispatch, và reducer trong extraReducers sẽ cập nhật loading thành true và error thành null. Điều này cho phép component hiển thị trạng thái "Loading...".
Fulfilled State:

Khi API trả về thành công, action fetchUsers.fulfilled được dispatch. Reducer sẽ nhận action.payload là dữ liệu người dùng từ API, cập nhật users và đặt loading thành false.
Rejected State:

Nếu có lỗi xảy ra (ví dụ: không có kết nối mạng), action fetchUsers.rejected sẽ được dispatch. Reducer sẽ nhận error.message từ action.payload và cập nhật error với thông báo lỗi, đồng thời đặt loading thành false. Component sẽ hiển thị lỗi này nếu có.